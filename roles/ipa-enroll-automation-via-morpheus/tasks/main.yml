---
- name: Validate required variables
  ansible.builtin.assert:
    that:
      - morpheus_api_token is string and morpheus_api_token != '' and morpheus_api_token is defined
      - morpheus_api_url is string and morpheus_api_url != '' and morpheus_api_url is defined
      - morpheus_api_url | regex_search('^https?://[a-zA-Z0-9.\-\/\:]{1,}')
      - morpheus_tenant_name is string and morpheus_tenant_name != '' and morpheus_tenant_name is defined
      - update_morpheus_cypher != '' and update_morpheus_cypher is defined
    fail_msg: "Input validation failed. See README.md for information on required inputs and their format."
    success_msg: "User input configuration is valid."

- name: Validate optional variables
  ansible.builtin.assert:
    that:
      - morpheus_cypher_ipa_domain is string and morpheus_cypher_ipa_domain is defined and morpheus_cypher_ipa_domain != ''
      - morpheus_cypher_ipa_server_hostname is string and morpheus_cypher_ipa_server_hostname is defined and morpheus_cypher_ipa_server_hostname != ''
      - morpheus_cypher_ipa_admin_username is string and morpheus_cypher_ipa_admin_username is defined and morpheus_cypher_ipa_admin_username != ''
      - morpheus_cypher_ipa_admin_password is string and morpheus_cypher_ipa_admin_password is defined and morpheus_cypher_ipa_admin_password != ''
    fail_msg: "Input validation failed. See README.md for information on optional inputs and their format."
    success_msg: "User optional input configuration is valid."
  when: update_morpheus_cypher | bool

- name: Set static Morpheus configurations
  ansible.builtin.set_fact:
    morpheus_facts:
      integration:
        name: "IPA Client Enroll Automation Via Morpheus"
        serviceUrl: "https://github.com/ewcloud/ewc-ansible-playbook-ipa-enroll-automation-via-morpheus.git"
        config:
          defaultBranch: "main"
          ansiblePlaybooks: "/"
          ansibleRoles: "/roles"
          ansibleGroupVars: "/group_vars"
          ansibleHostVars: "/host_vars"
          ansibleCommandBus: true
          ansibleGalaxyEnabled: true
      tasks:
        - name: "Enroll IPA Client"
          ansiblePlaybook: "ipa-client-enroll-via-morpheus"
          ansibleGitRef: "release/1.0.0"
        - name: "Disenroll IPA Client"
          ansiblePlaybook: "ipa-client-disenroll-via-morpheus"
          ansibleGitRef: "release/1.0.0"
      workflow:
        name: "IPA Client Enroll Automation Via Morpheus"

- name: Gather facts about the Morpheus Tenant
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/whoami"
    method: GET
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
  register: tenant_check
  no_log: true

- name: Verify Morpheus Tenant exists
  ansible.builtin.set_fact:
    morpheus_tenant_id: "{{ tenant_check.json.user.account.id }}"
  when: tenant_check.json.user.account.name == morpheus_tenant_name
  failed_when: tenant_check.json.user.account.name != morpheus_tenant_name
  vars:
    error_msg: "Tenant '{{ morpheus_tenant_name }}' does not exist or wrong access token given."

- name: Store secrets in Morpheus Cypher (no expire date)
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/cypher/secret/{{ item.key }}?type=string&ttl=0"
    method: POST
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      value: "{{ item.value }}"
    validate_certs: false
  loop:
    - { key: "ipa_domain", value: "{{ morpheus_cypher_ipa_domain }}" }
    - { key: "ipa_server_hostname", value: "{{ morpheus_cypher_ipa_server_hostname }}" }
    - { key: "ipa_admin_username", value: "{{ morpheus_cypher_ipa_admin_username }}" }
    - { key: "ipa_admin_password", value: "{{ morpheus_cypher_ipa_admin_password }}" }
  register: store_morpheus_cypher_result
  when: update_morpheus_cypher | bool
  changed_when: true
  no_log: true

- name: Get IDs of Morpheus Cypher secrets
  ansible.builtin.set_fact:
    morpheus_cypher_secrets: "{{ store_morpheus_cypher_result.results | json_query('[].json.cypher.{id: id, name: itemKey}') }}"
  when: update_morpheus_cypher | bool

- name: Check for existing Morpheus Integration with GitHub repository
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/integrations?max=9999"
    method: GET
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
  register: morpheus_integration_check
  no_log: true

- name: Set Morpheus Integration ID if exists
  ansible.builtin.set_fact:
    morpheus_integration_id: "{{ (morpheus_integration_check.json.integrations | selectattr('name', 'equalto', morpheus_facts.integration.name) | first).id | default(None) }}"

- name: Create new Morpheus Integration for GitHub repository
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/integrations"
    method: POST
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      integration:
        name: "{{ morpheus_facts.integration.name }}"
        type: ansible
        enabled: true
        serviceUrl: "{{ morpheus_facts.integration.serviceUrl }}"
        config: >-
          {{ morpheus_facts.integration.config }}
    validate_certs: false
  register: create_morpheus_integration_result
  when: morpheus_integration_id == ''
  changed_when: true
  no_log: true

- name: Update existing Morpheus Integration for GitHub repository
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/integrations/{{ morpheus_integration_id }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      integration:
        name: "{{ morpheus_facts.integration.name }}"
        type: ansible
        enabled: true
        serviceUrl: "{{ morpheus_facts.integration.serviceUrl }}"
        config: >-
          {{ morpheus_facts.integration.config }}
    validate_certs: false
  register: update_morpheus_integration_result
  when: morpheus_integration_id != ''
  changed_when: true
  no_log: true

- name: Get ID of Morpheus Integration
  ansible.builtin.set_fact:
    morpheus_integration_id: "{{ create_morpheus_integration_result.json.integration.id if morpheus_integration_id == '' else update_morpheus_integration_result.json.integration.id }}"

- name: Check for existing Morpheus Tasks
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/tasks?max=9999"
    method: GET
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
  register: morpheus_task_check
  no_log: true

- name: Set Morpheus Task ID if exists (to be ran during provision)
  ansible.builtin.set_fact:
    morpheus_task_id_provision: "{{ (morpheus_task_check.json.tasks | selectattr('name', 'equalto', morpheus_facts.tasks[0].name) | first).id | default(None) }}"

- name: Create new Morpheus Task (to be ran during provision)
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/tasks"
    method: POST
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      task:
        name: "{{ morpheus_facts.tasks[0].name }}"
        visibility: "private"
        taskType:
          code: "ansibleTask"
        labels:
          - "ipa-enroll-automation-via-morpheus"
          - "ewc-community-hub"
        executeTarget: "resource"
        taskOptions:
          ansibleGitId: "{{ morpheus_integration_id }}"
          ansiblePlaybook: "{{ morpheus_facts.tasks[0].ansiblePlaybook }}"
          ansibleGitRef: "{{ morpheus_facts.tasks[0].ansibleGitRef }}"
    validate_certs: false
  register: create_morpheus_task_result_provision
  when: morpheus_task_id_provision == ''
  changed_when: true
  no_log: true

- name: Update existing Morpheus Task (to be ran during provision)
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/tasks/{{ morpheus_task_id_provision }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      task:
        name: "{{ morpheus_facts.tasks[0].name }}"
        visibility: "private"
        taskType:
          code: "ansibleTask"
        labels:
          - "ipa-enroll-automation-via-morpheus"
          - "ewc-community-hub"
        executeTarget: "resource"
        taskOptions:
          ansibleGitId: "{{ morpheus_integration_id }}"
          ansiblePlaybook: "{{ morpheus_facts.tasks[0].ansiblePlaybook }}"
          ansibleGitRef: "{{ morpheus_facts.tasks[0].ansibleGitRef }}"
    validate_certs: false
  register: update_morpheus_task_result_provision
  when: morpheus_task_id_provision != ''
  changed_when: true
  no_log: true

- name: Get ID of Morpheus Task (to be ran during provision)
  ansible.builtin.set_fact:
    morpheus_task_id_provision: "{{ create_morpheus_task_result_provision.json.task.id if morpheus_task_id_provision == '' else update_morpheus_task_result_provision.json.task.id }}"

- name: Set Morpheus Task ID if exists (to be ran during teardown)
  ansible.builtin.set_fact:
    morpheus_task_id_teardown: "{{ (morpheus_task_check.json.tasks | selectattr('name', 'equalto', morpheus_facts.tasks[1].name) | first).id | default(None) }}"

- name: Create new Morpheus Task (to be ran during teardown)
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/tasks"
    method: POST
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      task:
        name: "{{ morpheus_facts.tasks[1].name }}"
        visibility: "private"
        taskType:
          code: "ansibleTask"
        labels:
          - "ipa-enroll-automation-via-morpheus"
          - "ewc-community-hub"
        executeTarget: "resource"
        taskOptions:
          ansibleGitId: "{{ morpheus_integration_id }}"
          ansiblePlaybook: "{{ morpheus_facts.tasks[1].ansiblePlaybook }}"
          ansibleGitRef: "{{ morpheus_facts.tasks[1].ansibleGitRef }}"
    validate_certs: false
  register: create_morpheus_task_result_teardown
  when: morpheus_task_id_teardown == ''
  changed_when: true
  no_log: true

- name: Update existing Morpheus Task (to be ran during teardown)
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/tasks/{{ morpheus_task_id_teardown }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      task:
        name: "{{ morpheus_facts.tasks[1].name }}"
        visibility: "private"
        taskType:
          code: "ansibleTask"
        labels:
          - "ipa-enroll-automation-via-morpheus"
          - "ewc-community-hub"
        executeTarget: "resource"
        taskOptions:
          ansibleGitId: "{{ morpheus_integration_id }}"
          ansiblePlaybook: "{{ morpheus_facts.tasks[1].ansiblePlaybook }}"
          ansibleGitRef: "{{ morpheus_facts.tasks[1].ansibleGitRef }}"
    validate_certs: false
  register: update_morpheus_task_result_teardown
  when: morpheus_task_id_teardown != ''
  changed_when: true
  no_log: true

- name: Get ID of Morpheus Task (to be ran during teardown)
  ansible.builtin.set_fact:
    morpheus_task_id_teardown: "{{ create_morpheus_task_result_teardown.json.task.id if morpheus_task_id_teardown == '' else update_morpheus_task_result_teardown.json.task.id }}"

- name: Check for existing Morpheus Workflow
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/task-sets?max=9999"
    method: GET
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    validate_certs: false
  register: morpheus_workflow_check
  no_log: true

- name: Set Morpheus Workflow ID if exists
  ansible.builtin.set_fact:
    morpheus_workflow_id: "{{ (morpheus_workflow_check.json.taskSets | selectattr('name', 'equalto', morpheus_facts.workflow.name) | first).id | default(None) }}"

- name: Create new Morpheus Workflow
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/task-sets"
    method: POST
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      taskSet:
        name: "{{ morpheus_facts.workflow.name }}"
        visibility: "private"
        type: "provision"
        tasks:
          - taskId: "{{ morpheus_task_id_provision }}"
            taskPhase: "provision"
          - taskId: "{{ morpheus_task_id_teardown }}"
            taskPhase: "teardown"
        labels:
          - "ipa-enroll-automation-via-morpheus"
          - "ewc-community-hub"
    validate_certs: false
  register: create_morpheus_workflow_result
  changed_when: true
  when: morpheus_workflow_id == ''
  no_log: true

- name: Update existing Morpheus Workflow
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/task-sets/{{ morpheus_workflow_id }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      taskSet:
        name: "{{ morpheus_facts.workflow.name }}"
        visibility: "private"
        type: "provision"
        tasks:
          - taskId: "{{ morpheus_task_id_provision }}"
            taskPhase: "provision"
        labels:
          - "ipa-enroll-automation-via-morpheus"
          - "ewc-community-hub"
    validate_certs: false
  register: update_morpheus_workflow_result
  changed_when: true
  when: morpheus_workflow_id != ''
  no_log: true

- name: Get ID of Morpheus Workflow
  ansible.builtin.set_fact:
    morpheus_workflow_id: "{{ create_morpheus_workflow_result.json.taskSet.id if morpheus_workflow_id == '' else update_morpheus_workflow_result.json.taskSet.id }}"

- name: Gather facts about the Morpheus Domain
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/networks/domains?max=9999"
    method: GET
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    validate_certs: false
  register: morpheus_domain_check
  no_log: true

- name: Set Morpheus Domain ID if exists
  ansible.builtin.set_fact:
    morpheus_domain_id: "{{ (morpheus_domain_check.json.networkDomains | selectattr('name', 'equalto', morpheus_cypher_ipa_domain) | first).id | default(None) }}"

- name: Create new Morpheus Domain
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/networks/domains"
    method: POST
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      networkDomain:
        name: "{{ morpheus_cypher_ipa_domain }}"
        active: true
        domainController: false
        taskSetId: "{{ morpheus_workflow_id }}"
    validate_certs: false
  register: create_morpheus_domain_result
  changed_when: true
  when: morpheus_domain_id == ''
  no_log: true

- name: Update existing Morpheus Domain
  ansible.builtin.uri:
    url: "{{ morpheus_api_url }}/api/networks/domains/{{ morpheus_domain_id }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ morpheus_api_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      networkDomain:
        name: "{{ morpheus_cypher_ipa_domain }}"
        active: true
        domainController: false
        taskSetId: "{{ morpheus_workflow_id }}"
    validate_certs: false
  register: update_morpheus_domain_result
  changed_when: true
  when: morpheus_domain_id != ''
  no_log: true

- name: Get ID of Morpheus Domain ID
  ansible.builtin.set_fact:
    morpheus_domain_id: "{{ create_morpheus_domain_result.json.networkDomain.id if morpheus_domain_id == '' else update_morpheus_domain_result.json.networkDomain.id }}"

- name: List created and/or updated Morpheus entities
  ansible.builtin.debug:
    msg:
      - "Morpheus Tenant: {'name': '{{ morpheus_tenant_name }}',  'id': '{{ morpheus_tenant_id }}'}"
      - "Morpheus Git Integration: {'name': '{{ morpheus_facts.integration.name }}', 'id':'{{ morpheus_integration_id }}'}"
      - "Morpheus Tasks: [{'name': '{{ morpheus_facts.tasks[0].name }}', 'id': '{{ morpheus_task_id_provision }}'}, {'name': '{{ morpheus_facts.tasks[1].name }}', 'id': '{{ morpheus_task_id_teardown }}'}]"
      - "Morpheus Workflow: {'name': '{{ morpheus_facts.workflow.name }}', 'id': '{{ morpheus_workflow_id }}'}"
      - "Morpheus Domain: {'name': '{{ morpheus_cypher_ipa_domain }}', 'id': '{{ morpheus_domain_id }}'}"
      - "{{ 'Morpheus Cypher Secrets: ' + (morpheus_cypher_secrets | to_json) if (update_morpheus_cypher | bool) else 'Morpheus Cypher Secrets: None' }}"
